Docker Introduction
------------------------
- Docker is a software which provides centralized platform to execute your application
- It wraps software components into a complete standardized unit which contains everything require to run
- Docker is a container management service.
- The keywords of Docker are Build, ship  and run anywhere. 
- The whole idea of Docker is for developers to easily develop applications, ship them into containers which can then be deployed anywhere.




------------------------------
Docker Installation on Ubuntu
-----------------------------

- First, add the GPG key for the official Docker repository to the system:
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
- Add the Docker repository to APT sources:
         sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" 
- Next, update the package database with the Docker packages from the newly added repo:
	sudo apt-get update 
- Make sure you are about to install from the Docker repo instead of the default Ubuntu 16.04 repo:
	sudo apt-cache policy docker-ce
	
- Finally, install Docker:
	sudo apt-get install -y docker-ce-cli=5:18.09.9~3-0~ubuntu-bionic docker-ce=5:18.09.9~3-0~ubuntu-bionic 
- Docker should now be installed, Check that it's running:
	sudo systemctl status docker
- checking the docker version:
      	docker --version
- Add your username to the docker group to avoid typing sudo whenever you run the docker command
	sudo usermod -aG docker ${USER}
- You can log out of the server and log-in back to apply changes
- Check whether your user added to docker group or not


Working with Docker
----------------------

- To familiar with the docker commands, then try below commands first
	docker
	docker  - -version
	docker info

- To view the switches available to a specific command, type:
	docker docker-subcommand –help
- To check whether you can access and download images from Docker Hub, type:
                docker run hello-world        
           The output, should indicate that  Docker in working correctly
- You can search for images available on Docker Hub by  using below command:
               docker search ubuntu

Creating a account on DockerHub:
--------------------------------
- Docker Hub is a registry service on the cloud that allows you to download Docker images that are built by other communities. 
- You can also upload your own Docker built images to Docker hub.
- The official site for Docker hub is : 
	https://hub.docker.com/
- First you need to do a simple sign-up on Docker hub.
- Once you have signed up, you will be logged into Docker Hub
- Next, let’s browse and find the Jenkins image.

Pulling and Running an Image from DockerHub
-------------------------------------------

- If you scroll down on the same page, you can see the Docker pull command. This
- will be used to download the Jenkins image onto the local Ubuntu serve
	docker pull jenkins
- To run Jenkins, you need to run the following command:
 	docker run -p 8080:8080 -p 50000:50000 jenkins

- You will then have Jenkins successfully running as a container on the Ubuntu machine.

Docker commands:
You can always push a new image to this repository using the CLI
$ docker tag local-image:tagname new-repo:tagname
$ docker push new-repo:tagname

You can always push a new image to this repository.
docker push ashok9dockhub/gssInfotech:tagname 


go to docker hub link: https://hub.docker.com and search for Jenkins

and get the pull command from that screen
run below command on your CLI


##############################################
pulling and running the jenkins from hub---
docker pull jenkins
nohup docker run -p 8080:8080 -p 50000:50000 jenkins & --to run background

remove image forcefully
docker rmi --force jenkins
docker rmi imageID
---To see only image ids
docker images -q

#####docker inspect : This command is used see the details of an image or container.
docker inspect jenkins	



docker images
root@ashok-VirtualBox:~# docker images
REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
hello-world         latest              1815c82652c0        10 days ago         1.84kB
centos              latest              3bee3060bfc8        2 weeks ago         193MB


? TAG – This is used to logically tag images.
? Image ID – This is used to uniquely identify the image.
? Created – The number of days since the image was created.
? Virtual Size – The size of the image.


docker run hello-world 
  --The run command is used to mention that we want to create an instance of an image, 
    which is then called a container.

docker run centos –it /bin/bash
  -- -it is used to mention that we want to run in interactive mode.

docker images
   -- The output will provide the list of images on the system.

docker run <image>
docker run ubuntu
   -- This command will download the centos image, if it is not already present, 
      and run the OS as a container.

docker rmi <ImageID>
  -- This command is used to remove Docker images.

docker images -q
  -- This command is used to return only the Image ID’s of the images.
     q - It tells the Docker command to return the Image ID’s only.

docker ps -a 
  -- -a - It tells the docker ps command to list all of the containers on the system.

docker history <containerId>
  -- ImageID - This is the Image ID for which you want to see all the 
     commands that were run against it.

docker top <ContainerID >
  -- With this command, you can see the top processes within a container.

docker stop <ContainerID> 
  -- ContainerID - This is the Container ID which needs to be stopped.

docker rm <ContainerID>
  -- ContainerID - This is the Container ID which needs to be removed.

docker stats <ContainerID> 
  -- ContainerID - This is the Container ID for which the stats need to be provided.

docker pause ContainerID
 --  is used to pause the processes in a running container.

docker unpause ContainerID
  -- is used to unpause the processes in a running container.

docker kill ContainerID
 --  is used to kill the processes in a running container.

---To see list of running containers
docker ps

---To see list of all containers on the system
docker ps -a


############################
Stopping and Starting the Docker
####################################
systemctl stop docker 
systemctl start docker 
systemctl status docker 
systemctl restart docker 


Creatig Docker files:
############################
Create a file called Docker File and edit it using vim. Please note that the name
of the file has to be "Dockerfile" with "D" as capital.

vi Dockerfile


----------------Example-----------------------------

# Pull base image.
FROM ubuntu

MAINTAINER Ashok
# Install Nginx.
RUN \
  apt-get update && \
  apt-get install -y nginx && \
#  rm -rf /var/lib/apt/lists/* && \
   echo "\ndaemon off;" >> /etc/nginx/nginx.conf
#  chown -R www-data:www-data /var/lib/nginx

# Define mountable directories.
#VOLUME ["/etc/nginx/sites-enabled", "/etc/nginx/certs", "/etc/nginx/conf.d", "/var/log/nginx", "/var/www/html"]

# Define working directory.
#WORKDIR /etc/nginx

# Define default command.
CMD ["nginx"]

# Expose ports.
EXPOSE 80
EXPOSE 443


then save above file.


Build an Image file using below command:
#############################################
syntax: docker build -t ImageName:TagName dir

docker build -t myfirstimage:0.0.1 /root/


docker tag
#############################
This method allows one to tag an image to the relevant repository.

Syntax :docker tag imageID Repositoryname

Example:
sudo docker tag ab0c1d3744dd ashok9dockhub/kingdom:1.0


Pushing the build onto Docker hub
####################
docker build -t mybuild:v1.0 .
docker tag de7bb9f6a368 ashok9dockhub/kingdom:mybuild_v1.0
docker push ashok9dockhub/kingdom:mybuild_v1.0

--->once uploaded the build to docker hub then delete the that build from your local
docker rmi -f imageID
---->then pull from docker hub
docker pull ashok9dockhub/kingdom:mybuild_v1.0



#############################
Installation of apache2
############################

Dockerfile
------------
FROM ubuntu 
RUN apt-get update 
RUN apt-get install -y apache2 
RUN apt-get install -y apache2-utils 
RUN apt-get clean 
EXPOSE 80 
CMD ["apache2ctl", "-D", "FOREGROUND"]


docker build –t=”mywebserver” . 

docker run –d –p 80:80 mywebserver 
---- –d : detached mode


Entry Point:
Entrypoint sets the command and parameters that will be executed first when a container is run.
--------------
Dockerfile:

FROM ubuntu 
MAINTAINER ashok 
ENTRYPOINT ["echo"]

or 

FROM ubuntu 
MAINTAINER ashok 
ENTRYPOINT ["cat"]

build a image 
run a image 
docker run imagename "hi guys"

ENV:
----
Dockerfile:

FROM ubuntu 
MAINTAINER ashok 
ENV var1=Tutorial var2=point 

build an image
run a image
docker run -it imagename /bin/bash

Creating a website:
---------------------

vi Docker file

# Use an official Python runtime as a parent image
FROM python:2.7-slim

# Set the working directory to /app
WORKDIR /app

# Copy the current directory contents into the container at /app
ADD . /app

# Install any needed packages specified in requirements.txt
RUN pip install --trusted-host pypi.python.org -r requirements.txt
	

# Make port 80 available to the world outside this container
EXPOSE 80 

# Define environment variable
ENV NAME=World

# Run app.py when the container launches
CMD ["python", "-p" "app.py", "]


####################################

create below files

touch app.py requirements.txt

vi requirements.txt
--------------------
Flask
Redis


vi app.py
---------------------
from flask import Flask
from redis import Redis, RedisError
import os
import socket

# Connect to Redis
redis = Redis(host="redis", db=0, socket_connect_timeout=2, socket_timeout=2)

app = Flask(__name__)

@app.route("/")
def hello():
    try:
        visits = redis.incr("counter")
    except RedisError:
        visits = "<i>cannot connect to Redis, counter disabled</i>"

    html = "<h3>Hello {name}!</h3>" \
           "<b>Hostname:</b> {hostname}<br/>" \
           "<b>Visits:</b> {visits}"
    return html.format(name=os.getenv("NAME", "world"), hostname=socket.gethostname(), 
visits=visits)

if __name__ == "__main__":
    app.run(host='0.0.0.0', port=80)

----------------------------------------------

build an image

docker build -t sitename .

docker run -p 7777:80 sitename

#################################################
Wordpress Installation				#
#################################################

MariaDB setup:
--------------
docker pull mariadb
mkdir ~/wordpress
mkdir -p ~/wordpress/database
mkdir -p ~/wordpress/html

docker run -e MYSQL_ROOT_PASSWORD=admin123 -e MYSQL_USER=wpuser -e MYSQL_PASSWORD=welcome1 -e MYSQL_DATABASE=wordpress_db -v /home/ubuntu/wordpress/database:/var/lib/mysql --name wordpressdb -d mariadb

Parameter explanation:

MYSQL_ROOT_PASSWORD = configure the password for the MySQL root user.
MYSQL_USER = create a new MySQL user 'wpuser' for the WordPress database.
MYSQL_PASSWORD = set the password 'wpuser@' for the user 'wpuser'.
MYSQL_DATABASE = create a new database for the wordpress installation with name 'wordpress_db'.
-v /root/wordpress/database:/varlib/mysql = linked database directory to the mysql directory '/var/lib/mysql' on the container to ensure data persistance.

From the host machine, check the wordpressdb container IP address with docker command below:

docker inspect -f '{{ .NetworkSettings.IPAddress }}' wordpressdb

Next, connect to the wordpressdb container with mysql command from the host system:
mysql -u wpuser -h 172.17.0.2 -p

Note: If mysql connect not installed on the machine then please install client : sudo apt install mysql-client-core-5.7

WordPress setup:
---------------
docker pull wordpress:latest

create a new container from the images with the name 'wpcontainer'.

docker run -e WORDPRESS_DB_USER=wpuser -e WORDPRESS_DB_PASSWORD=welcome1 -e WORDPRESS_DB_NAME=wordpress_db -p 8081:80 -v /root/wordpress/html:/var/www/html --link wordpressdb:mysql --name wpcontainer -d wordpress

Parameters:

WORDPRESS_DB_USER = define database user 'wpuser' for the wordpress db.
WORDPRESS_DB_PASSWORD = password 'wpuser@' for the database user 'wpuser'.
WORDPRESS_DB_NAME = name of the database 'wordpress_db' created on step 2.
-p 8081:80 = mapping the port 80 on the container to port 8081 on the host.
-v /root/wordpress/html:/var/www/html = Linking the web root directory '/var/www/html' on the container to the local host directory 'wordpress/html'.
--link wordpressdb:mysql = linking the mariadb container 'wordpressdb' to the new continer wordpress 'wpcontainer'.


To see the WordPress container running, you can check it with the curl command on the host IP and port 8081.

curl -I 192.168.43.99:8081

output:

HTTP/1.1 302 Found
Date: Sun, 15 Dec 2019 06:11:20 GMT
Server: Apache/2.4.38 (Debian)
X-Powered-By: PHP/7.3.12
Expires: Wed, 11 Jan 1984 05:00:00 GMT
Cache-Control: no-cache, must-revalidate, max-age=0
X-Redirect-By: WordPress
Location: http://34.230.39.136:8081/wp-admin/install.php
Content-Type: text/html; charset=UTF-8


take the location address and proceed with WordPress Installation.


#################################################




$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

docker linking::::::

--this is backend
docker pull mysql

docker run --name mbatch_mysql -e MYSQL_ROOT_PASSWORD=admin123 -d mysql:latest

--this is front
docker pull wordpress

docker run --name objectswordpress --link mbatch_mysql -p 8080:80 -d wordpress



Need to put connection details as well????


ubuntu@ip-172-31-17-223:~$ cat docker-compose.yml
version: '2.0'

services:

  wordpress:
    image: wordpress
    ports:
      - 9099:80
    environment:
      WORDPRESS_DB_PASSWORD: "admin123"

  mysql:
    image: mysql
    environment:
      MYSQL_ROOT_PASSWORD: "admin123"
ubuntu@ip-172-31-17-223:~$
ubuntu@ip-172-31-17-223:~$
ubuntu@ip-172-31-17-223:~$
ubuntu@ip-172-31-17-223:~$ cat docker-compose.yml_web
version: "3"
services:
  web:
    image: ashok9dockhub/vamsi_repo:mysite
    deploy:
      replicas: 3
      resources:
        limits:
          cpus: "0.1"
          memory: "50M"
      restart_policy:
        condition: on-failure
    ports:
      - "7070:80"
    networks:
      - webnet
networks:
  webnet:


explanation::::
-----------------------
This docker-compose.yml file tells Docker to do the following:

Pull the image from the registry.

Run 3 instances of that image as a service called web, limiting each one to use, at most, 10% 
of a single core of CPU time (this could also be e.g. “1.5” to mean 1 and half core for each), 
and 50MB of RAM.

Immediately restart containers if one fails.

Map port 4000 on the host to web’s port 80.

Instruct web’s containers to share port 80 via a load-balanced network called webnet. 
(Internally, the containers themselves publish to web’s port 80 at an ephemeral port.)

Define the webnet network with the default settings (which is a load-balanced overlay network).


:::::::::::::::::::::::::::::::::
in short:::::::::::::::::::::::::
:::::::::::::::::::::::::::::::::

FROM

Usage:

FROM <image>
FROM <image>:<tag>
FROM <image>@<digest>
Information:

FROM must be the first non-comment instruction in the Dockerfile.
FROM can appear multiple times within a single Dockerfile in order to create multiple images. 
Simply make a note of the last image ID output by the commit before each new FROM command.
The tag or digest values are optional. If you omit either of them, the builder assumes a latest 
by default. The builder returns an error if it cannot match the tag value.
_

MAINTAINER

Usage:

MAINTAINER <name>
The MAINTAINER instruction allows you to set the Author field of the generated images.

Reference

RUN

Usage:

RUN <command> (shell form, the command is run in a shell, which by default is /bin/sh -c on 
Linux or cmd /S /C on Windows)
RUN ["<executable>", "<param1>", "<param2>"] (exec form)
Information:

The exec form makes it possible to avoid shell string munging, and to RUN commands using a base 
image that does not contain the specified shell executable.
The default shell for the shell form can be changed using the SHELL command.
Normal shell processing does not occur when using the exec form. For example, RUN ["echo", 
"$HOME"] will not do variable substitution on $HOME.
_

CMD

Usage:

CMD ["<executable>","<param1>","<param2>"] (exec form, this is the preferred form)
CMD ["<param1>","<param2>"] (as default parameters to ENTRYPOINT)
CMD <command> <param1> <param2> (shell form)
Information:

The main purpose of a CMD is to provide defaults for an executing container. These defaults can 
include an executable, or they can omit the executable, in which case you must specify an 
ENTRYPOINT instruction as well.
There can only be one CMD instruction in a Dockerfile. If you list more than one CMD then only 
the last CMD will take effect.
If CMD is used to provide default arguments for the ENTRYPOINT instruction, both the CMD and 
ENTRYPOINT instructions should be specified with the JSON array format.
If the user specifies arguments to docker run then they will override the default specified in 
CMD.
Normal shell processing does not occur when using the exec form. For example, CMD ["echo", 
"$HOME"] will not do variable substitution on $HOME.
_

LABEL

Usage:

LABEL <key>=<value> [<key>=<value> ...]
Information:

The LABEL instruction adds metadata to an image.
To include spaces within a LABEL value, use quotes and backslashes as you would in command-line 
parsing.
Labels are additive including LABELs in FROM images.
If Docker encounters a label/key that already exists, the new value overrides any previous 
labels with identical keys.
To view an image’s labels, use the docker inspect command. They will be under the "Labels" JSON 
attribute.
_

EXPOSE

Usage:

EXPOSE <port> [<port> ...]
Information:

Informs Docker that the container listens on the specified network port(s) at runtime.
EXPOSE does not make the ports of the container accessible to the host.
_

ENV

Usage:

ENV <key> <value>
ENV <key>=<value> [<key>=<value> ...]
Information:

The ENV instruction sets the environment variable <key> to the value <value>.
The value will be in the environment of all “descendant” Dockerfile commands and can be 
replaced inline as well.
The environment variables set using ENV will persist when a container is run from the resulting 
image.
The first form will set a single variable to a value with the entire string after the first 
space being treated as the <value> - including characters such as spaces and quotes.
_

ADD

Usage:

ADD <src> [<src> ...] <dest>
ADD ["<src>", ... "<dest>"] (this form is required for paths containing whitespace)
Information:

Copies new files, directories, or remote file URLs from <src> and adds them to the filesystem 
of the image at the path <dest>.
<src> may contain wildcards and matching will be done using Go’s filepath.Match rules.
If <src> is a file or directory, then they must be relative to the source directory that is 
being built (the context of the build).
<dest> is an absolute path, or a path relative to WORKDIR.
If <dest> doesn’t exist, it is created along with all missing directories in its path.
_

COPY

Usage:

COPY <src> [<src> ...] <dest>
COPY ["<src>", ... "<dest>"] (this form is required for paths containing whitespace)
Information:

Copies new files or directories from <src> and adds them to the filesystem of the image at the 
path <dest>.
<src> may contain wildcards and matching will be done using Go’s filepath.Match rules.
<src> must be relative to the source directory that is being built (the context of the build).
<dest> is an absolute path, or a path relative to WORKDIR.
If <dest> doesn’t exist, it is created along with all missing directories in its path.
_

ENTRYPOINT

Usage:

ENTRYPOINT ["<executable>", "<param1>", "<param2>"] (exec form, preferred)
ENTRYPOINT <command> <param1> <param2> (shell form)
Information:

Allows you to configure a container that will run as an executable.
Command line arguments to docker run <image> will be appended after all elements in an exec 
form ENTRYPOINT and will override all elements specified using CMD.
The shell form prevents any CMD or run command line arguments from being used, but the 
ENTRYPOINT will start via the shell. This means the executable will not be PID 1 nor will it 
receive UNIX signals. Prepend exec to get around this drawback.
Only the last ENTRYPOINT instruction in the Dockerfile will have an effect.
_

VOLUME

Usage:

VOLUME ["<path>", ...]
VOLUME <path> [<path> ...]
Creates a mount point with the specified name and marks it as holding externally mounted 
volumes from native host or other containers.

_

USER

Usage:

USER <username | UID>
The USER instruction sets the user name or UID to use when running the image and for any RUN, 
CMD and ENTRYPOINT instructions that follow it in the Dockerfile.



WORKDIR

Usage:

WORKDIR </path/to/workdir>
Information:

Sets the working directory for any RUN, CMD, ENTRYPOINT, COPY, and ADD instructions that follow 
it.
It can be used multiple times in the one Dockerfile. If a relative path is provided, it will be 
relative to the path of the previous WORKDIR instruction.
_

ARG

Usage:

ARG <name>[=<default value>]
Information:

Defines a variable that users can pass at build-time to the builder with the docker build 
command using the --build-arg <varname>=<value> flag.
Multiple variables may be defined by specifying ARG multiple times.
It is not recommended to use build-time variables for passing secrets like github keys, user 
credentials, etc. Build-time variable values are visible to any user of the image with the 
docker history command.
Environment variables defined using the ENV instruction always override an ARG instruction of 
the same name.
Docker has a set of predefined ARG variables that you can use without a corresponding ARG 
instruction in the Dockerfile.
HTTP_PROXY and http_proxy
HTTPS_PROXY and https_proxy
FTP_PROXY and ftp_proxy
NO_PROXY and no_proxy




################################
docker swarm
################################
We need atleast three machine to work on Docker Swarm

The following ports must be available. On some systems, these ports are open by default.

TCP port 2377 for cluster management communications
TCP and UDP port 7946 for communication among nodes
UDP port 4789 for overlay network traffic

On Machine run the below command to make it as Manager Node:
   
docker swarm init --advertise-addr <ipaddress>

out put looks like:
---------------------------------------------------------
Swarm initialized: current node (rg8w3y05lvdvf5me9k9g5d4s4) is now a manager.

To add a worker to this swarm, run the following command:

    docker swarm join --token SWMTKN-1-0wzn32lyp70xwky49d26fb9rwlvsv50ybib7we1uke0sbgh4ks-d8ey57w5uiw2q920c6llsdvel xxx.xx.xx.xx:2377

To add a manager to this swarm, run 'docker swarm join-token manager' and follow the instructions.
------------------------------------------------------------

The output includes the commands to join new nodes to the swarm. Nodes will join as managers or workers depending on the value for the --token flag.


Run "docker info" to view the current state of the swarm

OUTPUT:
------

$ docker info

Containers: 2
Running: 0
Paused: 0
Stopped: 2
  ...snip...
Swarm: active
  NodeID: dxn1zf6l61qsb1josjja83ngz
  Is Manager: true
  Managers: 1
  Nodes: 1
  ...snip...

Run the docker "node ls" command to view information about nodes:

ubuntu@ip-:~$ docker node ls
ID                            HOSTNAME          STATUS              AVAILABILITY        MANAGER STATUS      ENGINE VERSION
zcxuhu86mls0oa33gd50p5l3b *   ip-12-31-84-12    Ready               Active              Leader              19.03.5


Joining nodes to Manager:
-------------------------
Run the "docker swarm join" command on worker nodes which was produced during "docker swarm init"

	docker swarm join --token SWMTKN-1-0wzn32lyp70xwky49d26fb9rwlvsv50ybib7we1uke0sbgh4ks-d8ey57w5uiw2q920c6llsdvel xxx.xx.xx.xx:2377

Open the Manager node then execute the below command to see the list of workers
    docker node ls

	
Deploying a service on Swarm:
------------------------------
run the below command to deploy a service: 
	docker service create --replicas 1 --name helloworld alpine ping docker.com

The docker service create command creates the service.
The --name flag names the service helloworld.
The --replicas flag specifies the desired state of 1 running instance.
The arguments alpine ping docker.com define the service as an Alpine Linux container that executes the command ping docker.com.	
	
to check the service:
		docker service ls
to remove the service:
        docker service rm ID

deploying apache/nginx:
	docker service create -p 80:80 apache
	docker service create -publish 80:80 nginx
	
	
If you don’t have the command available, you can run the following command on a manager node to retrieve the join command for a worker:
	docker swarm join-token worker
Use "docker swarm leave" to leave this swarm and join another one.
	docker swarm leave --force


ubuntu@ip-172-31-17-223:~$ docker swarm init
Swarm initialized: current node (07ib1q2f9p3v9tmxzkr7yhcq6) is now a manager.

To add a worker to this swarm, run the following command:

    docker swarm join --token SWMTKN-1-5wo8bssiq1fulbaexwzdylbme3w6ru5ukwnq8mdvwnoqblju94-3skfr1ku3ftfdvyj7rt1or4iw 172.31.17.223:2377

To add a manager to this swarm, run 'docker swarm join-token manager' and follow the instructions.



##################################
Configure the Docker daemon
##################################
Either pass the --registry-mirror option when starting dockerd manually, or edit /etc/docker/daemon.json and add the registry-mirrors key and value, to make the change persistent.

{
  "registry-mirrors": ["https://<my-docker-mirror-host>"]
}
Save the file and reload Docker for the change to take effect.

https://docs.docker.com/registry/recipes/mirror/

docker swarm related stuff::::::
-----------------------------------
https://www.thepolyglotdeveloper.com/2017/05/load-balancing-docker-swarm-cluster-nginx-reverse-proxy/


##########################################
How to make changes to running container:
##########################################

docker exec -it container-name bash
c. From the shell, make the changes in the container as required. This can include installing new packages, modifying configuration files, downloading or removing files, compiling modules, and so on.

d. Once the changes are done, exit the container. Then commit the container as a new image. This will save the modified container state as a new image.

docker commit container-ID image-name



##########################################
Assigning static IP to docker container
##########################################
Method1:
-------
Easy with Docker version 1.10.1, build 9e83765.

First you need to create you own docker network (mynet123)

>>> docker network create --subnet=172.18.0.0/16 mynet123

than simply run the image (I'll take ubuntu as example)
>>> docker run --net mynet123 --ip 172.18.0.22 -it ubuntu bash

then in ubuntu shell

>>> ip addr

Method2:
--------
For docker-compose you can use following docker-compose.yml

version: '2'
services:
  nginx:
    image: nginx
    container_name: nginx-container
    networks:
      static-network:
        ipv4_address: 172.20.128.2
networks:
  static-network:
    ipam:
      config:
        - subnet: 172.20.0.0/16
          #docker-compose v3+ do not use ip_range
          ip_range: 172.28.5.0/24
from host you can test using:

>>> docker-compose up -d
>>> curl 172.20.128.2
Modern docker-compose does not change ip address that frequently.

To find ips of all containers in your docker-compose in a single line use:

>>> for s in `docker-compose ps -q`; do echo ip of `docker inspect -f "{{.Name}}" $s` is `docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' $s`; done



